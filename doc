gradle command-line structure
    gradle [taskName...] [--option-name...]
Executing tasks in multi-project builds
    In a multi-project build, subproject tasks can be executed with ":" separating subproject name and
    task name. The following are equivalent when run from the root project.
    > gradle :mySubproject:taskName
    ❯ gradle mySubproject:taskName
Executing multiple tasks
    gradle task1 task2
exclude task
    gradle -x test
Computing all outputs
    It is common in Gradle builds for the build task to designate assembling all outputs and running all
    checks.
    ❯ gradle build
Running all checks
    It is common for all verification tasks, including tests and linting, to be executed using the check
    task.
    ❯ gradle check
Cleaning outputs
    You can delete the contents of the build directory using the clean task, though doing so will cause
    pre-computed outputs to be lost, causing significant additional build time for the subsequent task
    execution.
    ❯ gradle clean
Listing tasks
    Running gradle tasks gives you a list of the main tasks of the selected project. This report shows the
    default tasks for the project, if any, and a description for each task.
    ❯ gradle tasks
Listing project dependencies
    Running gradle dependencies gives you a list of the dependencies of the selected project, broken
    down by configuration. For each configuration, the direct and transitive dependencies of that
    configuration are shown in a tree. Below is an example of this report:
    ❯ gradle dependencie
Listing project properties
    Running gradle properties gives you a list of the properties of the selected project.
    Example: Information about properties
    Output of gradle -q api:properties
System properties
    Using the -D command-line option, you can pass a system property to the JVM which runs Gradle.
    The -D option of the gradle command has the same effect as the -D option of the java command.
    You can also set system properties in gradle.properties files with the prefix systemProp.
    Example: Specifying system properties in gradle.properties
        systemProp.gradle.wrapperUser=myuser
        systemProp.gradle.wrapperPassword=mypassword
    The following system properties are available. Note that command-line options take precedence
    over system properties.
        gradle.wrapperUser=(myuser)
Project properties
    You can add properties directly to your Project object via the -P command line option.
    Gradle can also set project properties when it sees specially-named system properties or
    environment variables. If the environment variable name looks like ORG_GRADLE_PROJECT
    prop=somevalue, then Gradle will set a prop property on your project object, with the value of
    somevalue. Gradle also supports this for system properties, but with a different naming pattern,
    which looks like org.gradle.project.prop. Both of the following will set the foo property on your
    Project object to "bar".
    Example: Setting a project property via gradle.properties
        org.gradle.project.foo=bar
Upgrading the Wrapper version
    > ./gradlew wrapper --gradle-version 4.2.1
Checking the Wrapper version after upgrading
     ./gradlew -v
download the lastest version of snapshot
    Override default 24h module caching in Gradle:
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    Then, latest.integration will work with each Maven snapshot:
    dependencies {
        compile 'projGroup:projName:latest.integration'
    }
Resolving version conflicts
    Gradle resolves version conflicts by picking the highest version of a module.
    1 Configuring any dependency (transitive or not) as forced. This approach is useful if the
      dependency in conflict is a transitive dependency.
Using dynamic versions and changing modules
    There are many situations when you want to use the latest version of a particular module
    dependency, or the latest in a range of versions. This can be a requirement during development, or
    you may be developing a library that is designed to work with a range of dependency versions. You
    can easily depend on these constantly changing dependencies by using a dynamic version. A
    dynamic version can be either a version range (e.g. 2.+) or it can be a placeholder for the latest
    version available e.g. latest.integration.
    Alternatively, the module you request can change over time even for the same version, a so-called
    changing version. An example of this type of changing module is a Maven SNAPSHOT module, which
    always points at the latest artifact published. In other words, a standard Maven snapshot is a
    module that is continually evolving, it is a "changing module"
Controlling dependency caching from the command line
    Avoiding network access with offline mode
        --offline command line switch tells Gradle to always use dependency modules from the cache,
        regardless if they are due to be checked again
    Forcing all dependencies to be re-resolved
        --refresh-dependencies option tells Gradle to ignore all cached entries for resolved modules
        and artifacts.





