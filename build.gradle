/*The root build.gradle is often used to share common configuration between the child projects, for
example by applying the same sets of plugins and dependencies to all the child projects. It can also
be used to configure individual subprojects when it is preferable to have all the configuration in
one place. This means you should always check the root build file when discovering how a
particular subproject is being configured.*/
plugins {
    id 'java'
    /*The Java Library plugin expands the capabilities of the Java plugin by providing specific knowledge
    about Java libraries. In particular, a Java library exposes an API to consumers (i.e., other projects
    using the Java or the Java Library plugin). All the source sets, tasks and configurations exposed by
    the Java plugin are implicitly available when using this plugin.*/
    /*The key difference between the standard Java plugin and the Java Library plugin is that the latter
    introduces the concept of an API exposed to consumers*/
    id 'java-library'
    /*The Application plugin facilitates creating an executable JVM application. It makes it easy to start
    the application locally during development, and to package the application as a TAR and/or ZIP
    including operating system specific start scripts.
            Applying the Application plugin also implicitly applies the Java plugin. The main source set is
    effectively the “application”.
    Applying the Application plugin also implicitly applies the Distribution plugin. A main distribution is
    created that packages up the application, including code dependencies and generated start scripts.*/
    id 'application'
    /*what to publish:For example, a publication destined for a Maven repository includes one or more artifacts
    typically built by the project — plus a POM file describing the primary artifact and its
    dependencies. The primary artifact is typically the project’s production JAR and secondary
    artifacts might consist of "-sources" and "-javadoc" JARs.
    how to publish: task PublishToMavenRepository  */
    id 'maven-publish'

}
configurations.all {
    //Controlling dependency caching programmatically
    //By default, Gradle caches dynamic versions for 24 hours. To change how long Gradle will cache the
    //resolved version for a dynamic version, use
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}
//Applying a script plugin,load another gradle file
apply from: 'other.gradle'
group 'com.wcx.gradle'
version '1.0-SNAPSHOT'
//The only mandatory configuration for the plugin is the specification of the main class
mainClassName = 'com.wcx.gradle.start.app'
/*If your application’s start scripts should be in a different directory than bin, you can configure the
executableDir property*/
/*You can run gradle installDist to create an image of the application in app/install/projectName.
  You can run gradle distZip to create a ZIP containing the distribution, gradle distTar to create an
application TAR or gradle assemble to app both*/
//Static files to be added to the distribution can be simply added to src/dist.
executableDir = "custom_bin_dir"

//Defines the minimum JVM version your code should run on, i.e. it determines the version of byte
//code the compiler generates.
sourceCompatibility = 1.8
//Defines the minimum JVM version your code should run on, i.e. it determines the version of byte
//code the compiler generates.
targetCompatibility = 1.8

repositories {
    mavenCentral()
    //JCenter Maven repository
    //Bintray's JCenter is an up-to-date collection of all popular Maven OSS artifacts, including artifacts
    //published directly to Bintray.
    jcenter()
    /*Gradle can consume dependencies available in the local Maven repository. Declaring this
    repository is beneficial for teams that publish to the local Maven repository with one project and
    consume the artifacts by Gradle in another project.
    Gradle stores resolved dependencies in its own cache. A build does not need to
    declare the local Maven repository even if you resolve dependencies from a Mavenbased,remote repository.
    To declare the local Maven cache as a repository add this to your build script*/
    mavenLocal()

    /*Custom Maven repositories
    Many organizations host dependencies in an in-house Maven repository only accessible within the
    company’s network. Gradle can declare Maven repositories by URL.*/
    /*maven {
        url "http://repo.mycompany.com/maven2"
        //You can specify credentials for Maven repositories secured by basic authentication using
        //api:org.gradle.api.credentials.PasswordCredentials[].
        credentials {
          username "user"
          password "password"
          }

    }*/


}
// you can exclude the transitive dependencies for a particular configuration
//configurations.all 设置所有
configurations {
    implementation {
        exclude group: 'javax.jms', module: 'jms'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
        exclude group: 'com.sun.jmx', module: 'jmxri'
    }
}


dependencies {
    /*compileOnly — for dependencies that are necessary to compile your production code but
    shouldn’t be part of the runtime classpath
    • implementation (supersedes compile) — used for compilation and runtime
    • runtimeOnly (supersedes runtime) — only used at runtime, not for compilation*/
    testCompile group: 'junit', name: 'junit', version: '4.12'

    /*Dependencies appearing in the api configurations will be transitively exposed to consumers of the
    library, and as such will appear on the compile classpath of consumers. Dependencies found in the
    implementation configuration will, on the other hand, not be exposed to consumers:*/
    api 'commons-httpclient:commons-httpclient:3.1'
    implementation 'org.apache.commons:commons-lang3:3.5'

    /*Declaring a dynamic version
    Projects might adopt a more aggressive approach for consuming dependencies to modules. For
    example you might want to always integrate the latest version of a dependency to consume cutting
    edge features at any given time. A dynamic version allows for resolving the latest version or the
    latest version of a version range for a given module.*/
    implementation 'org.springframework:spring-web:5.+'
    //Declaring a changing version
    /*By default, Gradle caches changing versions of dependencies for 24 hours. Within this time frame,
    Gradle does not try to resolve newer versions from the declared repositories.*/
    //implementation 'org.springframework:spring-web:5.0.3.BUILD-SNAPSHOT'

    //Excluding transitive module dependencies
    //Exclusions need to spelled out as a key/value pair via the attributes group and/or module.
    implementation('log4j:log4j:1.2.15') {
        exclude group: 'javax.jms', module: 'jms'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
        exclude group: 'com.sun.jmx', module: 'jmxri'
    }
    //Enforcing a particular dependency version
    /*Gradle resolves any dependency version conflicts by selecting the latest version found in the
    dependency graph. Some projects might need to divert from the default behavior and enforce an
    earlier version of a dependency e.g. if the source code of the project depends on an older API of a
    dependency than some of the external libraries.*/
    implementation('commons-codec:commons-codec:1.9') {
        force = true
    }

    //Disabling resolution of transitive dependencies
    //only the main artifact will be resolved for the declared dependency
    implementation('com.google.guava:guava:23.0') {
        transitive = false
    }

}

//获取properties gradle -q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps
task printProps {
    doLast {
        println commandLineProjectProp
        println gradlePropertiesProp
        println systemProjectProp
        println System.properties['system']
    }
}
// Set Java compile options for JavaCompile tasks
apply plugin: "java"
tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-nowarn"]
}

/*Configuring a task using project properties
It’s possible to change the behavior of a task based on project properties specified at invocationtime.
Suppose you’d like to ensure release builds are only triggered by CI. A simple way to handle this is
through an isCI project property.
 gradle performRelease -PisCI=true --quiet*/
task performRelease {
    doLast {
        if (project.hasProperty("isCI")) {
            println("Performing release actions")
        } else {
            throw new InvalidUserDataException("Cannot perform release outside of CI")
        }
    }
}
//A task should define a group and description.
task generateDocs {
    group = 'Documentation'
    description = 'Generates the HTML documentation for this project.'
    doLast {
        // action implementation
    }
}
/*Project evaluation
You can receive a notification immediately before and after a project is evaluated. This can be used
to do things like performing additional configuration once all the definitions in a build script have
been applied, or for some custom logging or profiling.
Below is an example which adds a test task to each project which has a hasTests property value of
true.*/
//Adding of test task to each project which has certain property set
///gradle test
/*def hasTests=false
subprojects {
    afterEvaluate { project ->
        if (project.hasTests) {
            println "Adding test task to $project"
            project.task('test') {
                doLast {
                    println "Running tests for $project"
                }
            }
        }
    }
}*/
//Customization of MANIFEST.MF
//You can use gradle properties to list the properties of a project. This will allow you to
//see the properties added by the Java plugin, and their default values.
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': version, 'name': 'wang'
    }
}
//publish to a local directory
//修改uploadArchives 默认task的属性
uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}
//Multi-project Java build
/*the root project is like a container and the subprojects method iterates
over the elements of this container - the projects in this instance - and injects the specified
configuration. This way we can easily define the manifest content for all archives, and some
common dependencies:*/
subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
    dependencies {
        testCompile 'junit:junit:4.12'
    }
    version = '1.0'
    jar {
        manifest.attributes provider: 'gradle'
    }
}
//publish
//Adding custom artifacts to a publication
/*Users often need to include additional artifacts with a publication, one of the most common
examples being that of "-sources" and "-javadoc" JARs for JVM libraries
The following sample configures "-sources" and "-javadoc" JARs for a Java project and attaches them
to the main (Maven) publication, i.e. the production JAR:*/
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
/*we want to publish the project’s production JAR file — the one produced by the
jar task — to a custom, Maven repository. We do that with the following publishing {} block, which
is backed by PublishingExtension:*/
publishing {
    publications {
        /*This defines a publication called "myLibrary" that can be published to a Maven repository by virtue
        of its type: MavenPublication. This publication consists of just the production JAR artifact and its
        metadata, which combined are represented by the java component of the project.*/
        myLibrary(MavenPublication) {
            /*Components are the standard way of defining a publication. They are provided by
            plugins, usually of the language or platform variety. For example, the Java Plugin
            defines the components.java SoftwareComponent, while the War Plugin defines
            components.web.*/
            from components.java
            /*The artifact() method accepts archive tasks as an argument — like sourcesJar in the sample —
            as well as any type of argument accepted by Project.file(java.lang.Object), such as a File
            instance or string file path.*/
            artifact sourcesJar
            artifact javadocJar

            /*Identity values in the generated POM
            The attributes of the generated POM file will contain identity values derived from the following
            project properties:
            • groupId - Project.getGroup()
            • artifactId - Project.getName()
            • version - Project.getVersion()
            Overriding the default identity values is easy: simply specify the groupId, artifactId or version
            attributes when configuring the MavenPublication.*/
            groupId = 'org.gradle.sample'
            artifactId = 'project1-sample'
            version = '1.1'

            /*Customizing the generated POM
            The generated POM file can be customized before publishing. For example, when publishing a
            library to Maven Central you will need to set certain metadata. The Maven Publish Plugin provides
            a DSL for that purpose. Please see MavenPom in the DSL Reference for the complete documentation
            of available properties and methods. The following sample shows how to use the most common
            ones:*/
            pom {
                name = 'My Library'
                description = 'A concise description of my library'
                url = 'http://www.example.com/library'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'johnd'
                        name = 'John Doe'
                        email = 'john.doe@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://example.com/my-library.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'http://example.com/my-library/'
                }
            }


        }
    }
    /*Gradle will then
    create a dedicated publishMyLibraryPublicationToMyRepoRepository task that does just that. Its name
    is based on the template publishPubNamePublicationToRepoNameRepository.
    You can either execute the individual publishing tasks directly, or you can execute publish, which
    will run all the available publishing tasks. In this example, publish will just run
    publishMyLibraryPublicationToMavenRepository.*/
    repositories {
        maven {
            /* The example also defines a file-based Maven repository with the name "myRepo". Such a file-based
             repository is convenient for a sample, but real-world builds typically work with HTTPS-based
             repository servers, such as Maven Central or an internal company server.*/
            /*You may define one, and only one, repository without a name. This translates to an
            implicit name of "Maven" for Maven repositories and "Ivy" for Ivy repositories. All
            other repository definitions must be given an explicit name.*/
            name = 'myRepo'
            //// change to point to your repo, e.g. http://my.org/repo
            url = "file://${buildDir}/repo"

            //Snapshot and release repositories
            /*It is a common practice to publish snapshots and releases to different Maven repositories. A simple
            way to accomplish this is to configure the repository URL based on the project version. The
            following sample uses one URL for versions that end with "SNAPSHOT" and a different URL for the
            rest:*/
            def releasesRepoUrl = "$buildDir/repo/releases"
            def snapshotsRepoUrl = "$buildDir/repo/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            //Configuring repository URL based on project property
            /*Similarly, you can use a project or system property to decide which repository to publish to. The
            following example uses the release repository if the project property release is set, such as when a
            user runs gradle -Prelease publish:*/
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl

            //publish to maven local
            /*For integration with a local Maven installation, it is sometimes useful to publish the module into the
            Maven local repository (typically at $USER_HOME/.m2/repository), along with its POM file and other
            metadata. In Maven parlance, this is referred to as 'installing' the module.
            The Maven Publish Plugin makes this easy to do by automatically creating a PublishToMavenLocal
            task for each MavenPublication in the publishing.publications container. The task name follows
            the pattern of publishPubNamePublicationToMavenLocal. Each of these tasks is wired into the
            publishToMavenLocal aggregate task. You do not need to have mavenLocal() in your
            publishing.repositories section.*/

        }
    }
}








